package com.alexprojects.crap;

import android.content.ContentValues;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.StrictMode;
import android.speech.RecognizerIntent;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.xml.sax.XMLReader;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.HttpsURLConnection;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

public class CRAPhome extends AppCompatActivity implements View.OnClickListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_craphome);
        Button send = (Button) findViewById(R.id.btn_send);
        send.setOnClickListener(this);
    }

    public void onClick(View v) {

        StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
        StrictMode.setThreadPolicy(policy);

        URL url;
        HttpsURLConnection conn = null;
        try {
            url = new URL("https://api.ciscospark.com/v1/messages");
            conn = (HttpsURLConnection) url.openConnection();
            conn.setReadTimeout(10000);
            conn.setConnectTimeout(15000);
            conn.setRequestProperty("Authorization", "Bearer ODE1OGUwM2QtOTIzYi00NDZhLWE4YmUtNGY0Njc2MzQyNDEwZjg2ODQ4MTEtOGQx");
            conn.setRequestMethod("POST");
            Log.d("LOG1", "We are connected");
            conn.setRequestProperty("Content-type", "application/json");
            Log.d("LOG2", "We are connected");
            conn.setDoInput(true);
            conn.setDoOutput(true);

            List<NameValuePair> params = new ArrayList<NameValuePair>();
            params.add(new BasicNameValuePair("roomId", "Y2lzY29zcGFyazovL3VzL1JPT00vZDg4M2QxYjAtNDc0Mi0xMWU2LTg0YWMtOGYxZDhjMGU0YTNk"));
            params.add(new BasicNameValuePair("text", "Hello folks !"));
            Log.d("LOG3", "We are connected");
            OutputStream os = conn.getOutputStream();
            Log.d("LOG4", "We are connected");
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(getQuery(params));
            writer.flush();
            writer.close();
            Log.d("LOG5", "We are connected");
            os.close();
            Log.d("LOG6", "We are connected");
            conn.connect();
            Log.d("LOG7", "We are connected");
            String responseCode = conn.getResponseMessage();
            System.out.println("\nSending 'POST' request to URL : " + url);
            System.out.println("Response Code : " + responseCode);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
        private String getQuery(List<NameValuePair> params) throws UnsupportedEncodingException {
            StringBuilder result = new StringBuilder();
            boolean first = true;

            for (NameValuePair pair : params) {
                if(first)
                    first = false;
                else
                    result.append("&");

                result.append(URLEncoder.encode(pair.getName(), "UTF-8"));
                result.append("=");
                result.append(URLEncoder.encode(pair.getValue(), "UTF-8"));
            }
            return result.toString();
        }
    
}
