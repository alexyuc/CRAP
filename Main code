package com.alexprojects.ciscorapv2;

import android.net.Uri;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.UnsupportedEncodingException;
import java.net.URL;

import javax.net.ssl.HttpsURLConnection;

public class CiscoRAPv2home extends AppCompatActivity {

    private final String MYURL = "";
    private static final String TAG = "TRALALA";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_cisco_rapv2home);
        new MyAsync().execute(); // Lance l'asyncTask
    }

    private static class MyAsync extends AsyncTask<Void, Void, String> {

        @Override
        protected String doInBackground(Void... params) {

            try {
                HttpsURLConnection conn = create();
                int responseCode = conn.getResponseCode();
                InputStream is = conn.getInputStream();
                String contentAsString = readIt(is);

                return contentAsString;
            } catch (IOException e) {
                e.printStackTrace();
            }
            return "";
        }
        //Permet de convertir la reponse en String
        public String readIt(InputStream stream) throws IOException, UnsupportedEncodingException {
            String line;
            String response = "";
            BufferedReader br = new BufferedReader(new InputStreamReader(stream));
            while ((line = br.readLine()) != null) {
                response += line;
            }
            return response;
        }
        //Permet de creer la connexion
        public HttpsURLConnection create() throws IOException {

            URL url = new URL("https://api.ciscospark.com/v1/messages");
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            conn.setReadTimeout(10000);
            conn.setConnectTimeout(15000);
            conn.setRequestProperty("Authorization", "Bearer NmJhZDU2NGMtZjg4YS00NGU0LWE2OTAtNmI4YzgxZTFmYzI5MTVmMzNmMGMtM2Nk");
            conn.setRequestMethod("POST");
            conn.setDoInput(true);
            conn.setDoOutput(true);
            //Permet de rajouter le body de la requete
            Uri.Builder builder = new Uri.Builder()
                    .appendQueryParameter("roomId", "Y2lzY29zcGFyazovL3VzL1JPT00vZDg4M2QxYjAtNDc0Mi0xMWU2LTg0YWMtOGYxZDhjMGU0YTNk")
                    .appendQueryParameter("text", "test");
            String query = builder.build().getEncodedQuery();

            OutputStream os = conn.getOutputStream();
            BufferedWriter writer = new BufferedWriter(
                    new OutputStreamWriter(os, "UTF-8"));
            writer.write(query);
            writer.flush();
            writer.close();
            os.close();

            conn.connect();
            return conn;
        }


        @Override
        protected void onPostExecute(String response) {
            super.onPostExecute(response);
            Log.d(TAG, "onPostExecute: " + response);
        }
    }
}
